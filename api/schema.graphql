type Schema {
  query: Query,
  mutation: Mutation
}

type Query {
  getChoice(id: String!): ChoiceResult
  getChoiceList(id: String!): ChoiceList
  getCustomChoice(id: String!): CustomChoice
}

type Mutation {
  createRestaurant(name: String!, location: String!): Restaurant!
  createActivity(name: String!): Activity!
  createChoiceList(name: String!, editUser: [String!], readUser: [String!]): ChoiceList!
}

# A choice user can make.
interface Choice {
  id: ID!
  name: String!
}

# A restaurant user can choose.
# This will be readable to everyone.
# TODO: Limit the mutation access of this type
type Restaurant implements Choice {
  id: ID!
  name: String!
  location: String!
}

type Activity implements Choice {
  id: ID!
  name: String!
}

union ChoiceResult = Restaurant | Activity

# A list of choices user will use to make choice
type ChoiceList {
  id: ID!
  name: String!
  owner: String!  # Primary owner of this list
  editUser: [String!]  # Users that can update this list
  readUser: [String!]  # Users with read access to this list
  list: [CustomChoice!]
}

# A wrapper of a choice. Choice lists use this type of object in their list
# so they can include a choice and add list-specific properties on it.
type CustomChoice {
  id: ID!
  choice: Choice!
  note: String
}
